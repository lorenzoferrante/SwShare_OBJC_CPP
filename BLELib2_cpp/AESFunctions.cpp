//
//  AESFunctions.m
//  BLELib2
//
//  Created by Lorenzo Ferrante on 17/10/23.
//

#include "AESFunctions.h"

#define AES_EXIT_SUCCESS 0
#define AES_EXIT_FAILURE (-1)
#define VERSION_1

#define block_copy_nn(d, s, l) memcpy(d, s, l)
#define block_copy(d, s) memcpy(d, s, N_BLOCK_AES)

#define WPOLY 0x011b

#define f1(x)(x)
#define f2(x)((x << 1) ^ (((x >> 7) & 1) * WPOLY))
#define f4(x)((x << 2) ^ (((x >> 6) & 1) * WPOLY) ^ (((x >> 6) & 2) * WPOLY))
#define f8(x)((x << 3) ^ (((x >> 5) & 1) * WPOLY) ^ (((x >> 5) & 2) * WPOLY) ^ (((x >> 5) & 4) * WPOLY))
#define d2(x)(((x) >> 1) ^ ((x) & 1 ? DPOLY : 0))

#define f3(x)(f2(x) ^ x)
#define f9(x)(f8(x) ^ x)
#define fb(x)(f8(x) ^ f2(x) ^ x)
#define fd(x)(f8(x) ^ f4(x) ^ x)
#define fe(x)(f8(x) ^ f4(x) ^ f2(x))

#define sb_data(w) {    /* S Box data values */                            \
     w(0x63), w(0x7c), w(0x77), w(0x7b), w(0xf2), w(0x6b), w(0x6f), w(0xc5),\
     w(0x30), w(0x01), w(0x67), w(0x2b), w(0xfe), w(0xd7), w(0xab), w(0x76),\
     w(0xca), w(0x82), w(0xc9), w(0x7d), w(0xfa), w(0x59), w(0x47), w(0xf0),\
     w(0xad), w(0xd4), w(0xa2), w(0xaf), w(0x9c), w(0xa4), w(0x72), w(0xc0),\
     w(0xb7), w(0xfd), w(0x93), w(0x26), w(0x36), w(0x3f), w(0xf7), w(0xcc),\
     w(0x34), w(0xa5), w(0xe5), w(0xf1), w(0x71), w(0xd8), w(0x31), w(0x15),\
     w(0x04), w(0xc7), w(0x23), w(0xc3), w(0x18), w(0x96), w(0x05), w(0x9a),\
     w(0x07), w(0x12), w(0x80), w(0xe2), w(0xeb), w(0x27), w(0xb2), w(0x75),\
     w(0x09), w(0x83), w(0x2c), w(0x1a), w(0x1b), w(0x6e), w(0x5a), w(0xa0),\
     w(0x52), w(0x3b), w(0xd6), w(0xb3), w(0x29), w(0xe3), w(0x2f), w(0x84),\
     w(0x53), w(0xd1), w(0x00), w(0xed), w(0x20), w(0xfc), w(0xb1), w(0x5b),\
     w(0x6a), w(0xcb), w(0xbe), w(0x39), w(0x4a), w(0x4c), w(0x58), w(0xcf),\
     w(0xd0), w(0xef), w(0xaa), w(0xfb), w(0x43), w(0x4d), w(0x33), w(0x85),\
     w(0x45), w(0xf9), w(0x02), w(0x7f), w(0x50), w(0x3c), w(0x9f), w(0xa8),\
     w(0x51), w(0xa3), w(0x40), w(0x8f), w(0x92), w(0x9d), w(0x38), w(0xf5),\
     w(0xbc), w(0xb6), w(0xda), w(0x21), w(0x10), w(0xff), w(0xf3), w(0xd2),\
     w(0xcd), w(0x0c), w(0x13), w(0xec), w(0x5f), w(0x97), w(0x44), w(0x17),\
     w(0xc4), w(0xa7), w(0x7e), w(0x3d), w(0x64), w(0x5d), w(0x19), w(0x73),\
     w(0x60), w(0x81), w(0x4f), w(0xdc), w(0x22), w(0x2a), w(0x90), w(0x88),\
     w(0x46), w(0xee), w(0xb8), w(0x14), w(0xde), w(0x5e), w(0x0b), w(0xdb),\
     w(0xe0), w(0x32), w(0x3a), w(0x0a), w(0x49), w(0x06), w(0x24), w(0x5c),\
     w(0xc2), w(0xd3), w(0xac), w(0x62), w(0x91), w(0x95), w(0xe4), w(0x79),\
     w(0xe7), w(0xc8), w(0x37), w(0x6d), w(0x8d), w(0xd5), w(0x4e), w(0xa9),\
     w(0x6c), w(0x56), w(0xf4), w(0xea), w(0x65), w(0x7a), w(0xae), w(0x08),\
     w(0xba), w(0x78), w(0x25), w(0x2e), w(0x1c), w(0xa6), w(0xb4), w(0xc6),\
     w(0xe8), w(0xdd), w(0x74), w(0x1f), w(0x4b), w(0xbd), w(0x8b), w(0x8a),\
     w(0x70), w(0x3e), w(0xb5), w(0x66), w(0x48), w(0x03), w(0xf6), w(0x0e),\
     w(0x61), w(0x35), w(0x57), w(0xb9), w(0x86), w(0xc1), w(0x1d), w(0x9e),\
     w(0xe1), w(0xf8), w(0x98), w(0x11), w(0x69), w(0xd9), w(0x8e), w(0x94),\
     w(0x9b), w(0x1e), w(0x87), w(0xe9), w(0xce), w(0x55), w(0x28), w(0xdf),\
     w(0x8c), w(0xa1), w(0x89), w(0x0d), w(0xbf), w(0xe6), w(0x42), w(0x68),\
     w(0x41), w(0x99), w(0x2d), w(0x0f), w(0xb0), w(0x54), w(0xbb), w(0x16) }

//-----------------------------------------------------------------------------
#define sb_data(w) {    /* S Box data values */                            \
     w(0x63), w(0x7c), w(0x77), w(0x7b), w(0xf2), w(0x6b), w(0x6f), w(0xc5),\
     w(0x30), w(0x01), w(0x67), w(0x2b), w(0xfe), w(0xd7), w(0xab), w(0x76),\
     w(0xca), w(0x82), w(0xc9), w(0x7d), w(0xfa), w(0x59), w(0x47), w(0xf0),\
     w(0xad), w(0xd4), w(0xa2), w(0xaf), w(0x9c), w(0xa4), w(0x72), w(0xc0),\
     w(0xb7), w(0xfd), w(0x93), w(0x26), w(0x36), w(0x3f), w(0xf7), w(0xcc),\
     w(0x34), w(0xa5), w(0xe5), w(0xf1), w(0x71), w(0xd8), w(0x31), w(0x15),\
     w(0x04), w(0xc7), w(0x23), w(0xc3), w(0x18), w(0x96), w(0x05), w(0x9a),\
     w(0x07), w(0x12), w(0x80), w(0xe2), w(0xeb), w(0x27), w(0xb2), w(0x75),\
     w(0x09), w(0x83), w(0x2c), w(0x1a), w(0x1b), w(0x6e), w(0x5a), w(0xa0),\
     w(0x52), w(0x3b), w(0xd6), w(0xb3), w(0x29), w(0xe3), w(0x2f), w(0x84),\
     w(0x53), w(0xd1), w(0x00), w(0xed), w(0x20), w(0xfc), w(0xb1), w(0x5b),\
     w(0x6a), w(0xcb), w(0xbe), w(0x39), w(0x4a), w(0x4c), w(0x58), w(0xcf),\
     w(0xd0), w(0xef), w(0xaa), w(0xfb), w(0x43), w(0x4d), w(0x33), w(0x85),\
     w(0x45), w(0xf9), w(0x02), w(0x7f), w(0x50), w(0x3c), w(0x9f), w(0xa8),\
     w(0x51), w(0xa3), w(0x40), w(0x8f), w(0x92), w(0x9d), w(0x38), w(0xf5),\
     w(0xbc), w(0xb6), w(0xda), w(0x21), w(0x10), w(0xff), w(0xf3), w(0xd2),\
     w(0xcd), w(0x0c), w(0x13), w(0xec), w(0x5f), w(0x97), w(0x44), w(0x17),\
     w(0xc4), w(0xa7), w(0x7e), w(0x3d), w(0x64), w(0x5d), w(0x19), w(0x73),\
     w(0x60), w(0x81), w(0x4f), w(0xdc), w(0x22), w(0x2a), w(0x90), w(0x88),\
     w(0x46), w(0xee), w(0xb8), w(0x14), w(0xde), w(0x5e), w(0x0b), w(0xdb),\
     w(0xe0), w(0x32), w(0x3a), w(0x0a), w(0x49), w(0x06), w(0x24), w(0x5c),\
     w(0xc2), w(0xd3), w(0xac), w(0x62), w(0x91), w(0x95), w(0xe4), w(0x79),\
     w(0xe7), w(0xc8), w(0x37), w(0x6d), w(0x8d), w(0xd5), w(0x4e), w(0xa9),\
     w(0x6c), w(0x56), w(0xf4), w(0xea), w(0x65), w(0x7a), w(0xae), w(0x08),\
     w(0xba), w(0x78), w(0x25), w(0x2e), w(0x1c), w(0xa6), w(0xb4), w(0xc6),\
     w(0xe8), w(0xdd), w(0x74), w(0x1f), w(0x4b), w(0xbd), w(0x8b), w(0x8a),\
     w(0x70), w(0x3e), w(0xb5), w(0x66), w(0x48), w(0x03), w(0xf6), w(0x0e),\
     w(0x61), w(0x35), w(0x57), w(0xb9), w(0x86), w(0xc1), w(0x1d), w(0x9e),\
     w(0xe1), w(0xf8), w(0x98), w(0x11), w(0x69), w(0xd9), w(0x8e), w(0x94),\
     w(0x9b), w(0x1e), w(0x87), w(0xe9), w(0xce), w(0x55), w(0x28), w(0xdf),\
     w(0x8c), w(0xa1), w(0x89), w(0x0d), w(0xbf), w(0xe6), w(0x42), w(0x68),\
     w(0x41), w(0x99), w(0x2d), w(0x0f), w(0xb0), w(0x54), w(0xbb), w(0x16) }

//-----------------------------------------------------------------------------
#define isb_data(w) {   /* inverse S Box data values */                    \
     w(0x52), w(0x09), w(0x6a), w(0xd5), w(0x30), w(0x36), w(0xa5), w(0x38),\
     w(0xbf), w(0x40), w(0xa3), w(0x9e), w(0x81), w(0xf3), w(0xd7), w(0xfb),\
     w(0x7c), w(0xe3), w(0x39), w(0x82), w(0x9b), w(0x2f), w(0xff), w(0x87),\
     w(0x34), w(0x8e), w(0x43), w(0x44), w(0xc4), w(0xde), w(0xe9), w(0xcb),\
     w(0x54), w(0x7b), w(0x94), w(0x32), w(0xa6), w(0xc2), w(0x23), w(0x3d),\
     w(0xee), w(0x4c), w(0x95), w(0x0b), w(0x42), w(0xfa), w(0xc3), w(0x4e),\
     w(0x08), w(0x2e), w(0xa1), w(0x66), w(0x28), w(0xd9), w(0x24), w(0xb2),\
     w(0x76), w(0x5b), w(0xa2), w(0x49), w(0x6d), w(0x8b), w(0xd1), w(0x25),\
     w(0x72), w(0xf8), w(0xf6), w(0x64), w(0x86), w(0x68), w(0x98), w(0x16),\
     w(0xd4), w(0xa4), w(0x5c), w(0xcc), w(0x5d), w(0x65), w(0xb6), w(0x92),\
     w(0x6c), w(0x70), w(0x48), w(0x50), w(0xfd), w(0xed), w(0xb9), w(0xda),\
     w(0x5e), w(0x15), w(0x46), w(0x57), w(0xa7), w(0x8d), w(0x9d), w(0x84),\
     w(0x90), w(0xd8), w(0xab), w(0x00), w(0x8c), w(0xbc), w(0xd3), w(0x0a),\
     w(0xf7), w(0xe4), w(0x58), w(0x05), w(0xb8), w(0xb3), w(0x45), w(0x06),\
     w(0xd0), w(0x2c), w(0x1e), w(0x8f), w(0xca), w(0x3f), w(0x0f), w(0x02),\
     w(0xc1), w(0xaf), w(0xbd), w(0x03), w(0x01), w(0x13), w(0x8a), w(0x6b),\
     w(0x3a), w(0x91), w(0x11), w(0x41), w(0x4f), w(0x67), w(0xdc), w(0xea),\
     w(0x97), w(0xf2), w(0xcf), w(0xce), w(0xf0), w(0xb4), w(0xe6), w(0x73),\
     w(0x96), w(0xac), w(0x74), w(0x22), w(0xe7), w(0xad), w(0x35), w(0x85),\
     w(0xe2), w(0xf9), w(0x37), w(0xe8), w(0x1c), w(0x75), w(0xdf), w(0x6e),\
     w(0x47), w(0xf1), w(0x1a), w(0x71), w(0x1d), w(0x29), w(0xc5), w(0x89),\
     w(0x6f), w(0xb7), w(0x62), w(0x0e), w(0xaa), w(0x18), w(0xbe), w(0x1b),\
     w(0xfc), w(0x56), w(0x3e), w(0x4b), w(0xc6), w(0xd2), w(0x79), w(0x20),\
     w(0x9a), w(0xdb), w(0xc0), w(0xfe), w(0x78), w(0xcd), w(0x5a), w(0xf4),\
     w(0x1f), w(0xdd), w(0xa8), w(0x33), w(0x88), w(0x07), w(0xc7), w(0x31),\
     w(0xb1), w(0x12), w(0x10), w(0x59), w(0x27), w(0x80), w(0xec), w(0x5f),\
     w(0x60), w(0x51), w(0x7f), w(0xa9), w(0x19), w(0xb5), w(0x4a), w(0x0d),\
     w(0x2d), w(0xe5), w(0x7a), w(0x9f), w(0x93), w(0xc9), w(0x9c), w(0xef),\
     w(0xa0), w(0xe0), w(0x3b), w(0x4d), w(0xae), w(0x2a), w(0xf5), w(0xb0),\
     w(0xc8), w(0xeb), w(0xbb), w(0x3c), w(0x83), w(0x53), w(0x99), w(0x61),\
     w(0x17), w(0x2b), w(0x04), w(0x7e), w(0xba), w(0x77), w(0xd6), w(0x26),\
     w(0xe1), w(0x69), w(0x14), w(0x63), w(0x55), w(0x21), w(0x0c), w(0x7d) }

//-----------------------------------------------------------------------------
static const uint8_t gfm2_sbox[256] = sb_data(f2);
static const uint8_t gfm3_sbox[256] = sb_data(f3);
static const uint8_t sbox[256]  =  sb_data(f1);
static const uint8_t isbox[256] = isb_data(f1);

//-----------------------------------------------------------------------------
#define s_box(x)     sbox[(x)]
#define is_box(x)    isbox[(x)]
#define gfm2_sb(x)   gfm2_sbox[(x)]
#define gfm3_sb(x)   gfm3_sbox[(x)]
#define gfm_9(x)     gfmul_9[(x)]
#define gfm_b(x)     gfmul_b[(x)]
#define gfm_d(x)     gfmul_d[(x)]
#define gfm_e(x)     gfmul_e[(x)]

//-----------------------------------------------------------------------------
//static const uint8_t gfmul_e[256] = mm_data(fe);
const uint8_t gfmul_e[256] =
        {
                fe(0x00), fe(0x01), fe(0x02), fe(0x03), fe(0x04), fe(0x05), fe(0x06), fe(0x07),\
         fe(0x08), fe(0x09), fe(0x0a), fe(0x0b), fe(0x0c), fe(0x0d), fe(0x0e), fe(0x0f),\
         fe(0x10), fe(0x11), fe(0x12), fe(0x13), fe(0x14), fe(0x15), fe(0x16), fe(0x17),\
         fe(0x18), fe(0x19), fe(0x1a), fe(0x1b), fe(0x1c), fe(0x1d), fe(0x1e), fe(0x1f),\
         fe(0x20), fe(0x21), fe(0x22), fe(0x23), fe(0x24), fe(0x25), fe(0x26), fe(0x27),\
         fe(0x28), fe(0x29), fe(0x2a), fe(0x2b), fe(0x2c), fe(0x2d), fe(0x2e), fe(0x2f),\
         fe(0x30), fe(0x31), fe(0x32), fe(0x33), fe(0x34), fe(0x35), fe(0x36), fe(0x37),\
         fe(0x38), fe(0x39), fe(0x3a), fe(0x3b), fe(0x3c), fe(0x3d), fe(0x3e), fe(0x3f),\
         fe(0x40), fe(0x41), fe(0x42), fe(0x43), fe(0x44), fe(0x45), fe(0x46), fe(0x47),\
         fe(0x48), fe(0x49), fe(0x4a), fe(0x4b), fe(0x4c), fe(0x4d), fe(0x4e), fe(0x4f),\
         fe(0x50), fe(0x51), fe(0x52), fe(0x53), fe(0x54), fe(0x55), fe(0x56), fe(0x57),\
         fe(0x58), fe(0x59), fe(0x5a), fe(0x5b), fe(0x5c), fe(0x5d), fe(0x5e), fe(0x5f),\
         fe(0x60), fe(0x61), fe(0x62), fe(0x63), fe(0x64), fe(0x65), fe(0x66), fe(0x67),\
         fe(0x68), fe(0x69), fe(0x6a), fe(0x6b), fe(0x6c), fe(0x6d), fe(0x6e), fe(0x6f),\
         fe(0x70), fe(0x71), fe(0x72), fe(0x73), fe(0x74), fe(0x75), fe(0x76), fe(0x77),\
         fe(0x78), fe(0x79), fe(0x7a), fe(0x7b), fe(0x7c), fe(0x7d), fe(0x7e), fe(0x7f),\
         fe(0x80), fe(0x81), fe(0x82), fe(0x83), fe(0x84), fe(0x85), fe(0x86), fe(0x87),\
         fe(0x88), fe(0x89), fe(0x8a), fe(0x8b), fe(0x8c), fe(0x8d), fe(0x8e), fe(0x8f),\
         fe(0x90), fe(0x91), fe(0x92), fe(0x93), fe(0x94), fe(0x95), fe(0x96), fe(0x97),\
         fe(0x98), fe(0x99), fe(0x9a), fe(0x9b), fe(0x9c), fe(0x9d), fe(0x9e), fe(0x9f),\
         fe(0xa0), fe(0xa1), fe(0xa2), fe(0xa3), fe(0xa4), fe(0xa5), fe(0xa6), fe(0xa7),\
         fe(0xa8), fe(0xa9), fe(0xaa), fe(0xab), fe(0xac), fe(0xad), fe(0xae), fe(0xaf),\
         fe(0xb0), fe(0xb1), fe(0xb2), fe(0xb3), fe(0xb4), fe(0xb5), fe(0xb6), fe(0xb7),\
         fe(0xb8), fe(0xb9), fe(0xba), fe(0xbb), fe(0xbc), fe(0xbd), fe(0xbe), fe(0xbf),\
         fe(0xc0), fe(0xc1), fe(0xc2), fe(0xc3), fe(0xc4), fe(0xc5), fe(0xc6), fe(0xc7),\
         fe(0xc8), fe(0xc9), fe(0xca), fe(0xcb), fe(0xcc), fe(0xcd), fe(0xce), fe(0xcf),\
         fe(0xd0), fe(0xd1), fe(0xd2), fe(0xd3), fe(0xd4), fe(0xd5), fe(0xd6), fe(0xd7),\
         fe(0xd8), fe(0xd9), fe(0xda), fe(0xdb), fe(0xdc), fe(0xdd), fe(0xde), fe(0xdf),\
         fe(0xe0), fe(0xe1), fe(0xe2), fe(0xe3), fe(0xe4), fe(0xe5), fe(0xe6), fe(0xe7),\
         fe(0xe8), fe(0xe9), fe(0xea), fe(0xeb), fe(0xec), fe(0xed), fe(0xee), fe(0xef),\
         fe(0xf0), fe(0xf1), fe(0xf2), fe(0xf3), fe(0xf4), fe(0xf5), fe(0xf6), fe(0xf7),\
         fe(0xf8), fe(0xf9), fe(0xfa), fe(0xfb), fe(0xfc), fe(0xfd), fe(0xfe), fe(0xff)
        };

//static const uint8_t gfmul_b[256] = mm_data(fb);
const uint8_t gfmul_b[256] =
        {
                fb(0x00), fb(0x01), fb(0x02), fb(0x03), fb(0x04), fb(0x05), fb(0x06), fb(0x07),\
         fb(0x08), fb(0x09), fb(0x0a), fb(0x0b), fb(0x0c), fb(0x0d), fb(0x0e), fb(0x0f),\
         fb(0x10), fb(0x11), fb(0x12), fb(0x13), fb(0x14), fb(0x15), fb(0x16), fb(0x17),\
         fb(0x18), fb(0x19), fb(0x1a), fb(0x1b), fb(0x1c), fb(0x1d), fb(0x1e), fb(0x1f),\
         fb(0x20), fb(0x21), fb(0x22), fb(0x23), fb(0x24), fb(0x25), fb(0x26), fb(0x27),\
         fb(0x28), fb(0x29), fb(0x2a), fb(0x2b), fb(0x2c), fb(0x2d), fb(0x2e), fb(0x2f),\
         fb(0x30), fb(0x31), fb(0x32), fb(0x33), fb(0x34), fb(0x35), fb(0x36), fb(0x37),\
         fb(0x38), fb(0x39), fb(0x3a), fb(0x3b), fb(0x3c), fb(0x3d), fb(0x3e), fb(0x3f),\
         fb(0x40), fb(0x41), fb(0x42), fb(0x43), fb(0x44), fb(0x45), fb(0x46), fb(0x47),\
         fb(0x48), fb(0x49), fb(0x4a), fb(0x4b), fb(0x4c), fb(0x4d), fb(0x4e), fb(0x4f),\
         fb(0x50), fb(0x51), fb(0x52), fb(0x53), fb(0x54), fb(0x55), fb(0x56), fb(0x57),\
         fb(0x58), fb(0x59), fb(0x5a), fb(0x5b), fb(0x5c), fb(0x5d), fb(0x5e), fb(0x5f),\
         fb(0x60), fb(0x61), fb(0x62), fb(0x63), fb(0x64), fb(0x65), fb(0x66), fb(0x67),\
         fb(0x68), fb(0x69), fb(0x6a), fb(0x6b), fb(0x6c), fb(0x6d), fb(0x6e), fb(0x6f),\
         fb(0x70), fb(0x71), fb(0x72), fb(0x73), fb(0x74), fb(0x75), fb(0x76), fb(0x77),\
         fb(0x78), fb(0x79), fb(0x7a), fb(0x7b), fb(0x7c), fb(0x7d), fb(0x7e), fb(0x7f),\
         fb(0x80), fb(0x81), fb(0x82), fb(0x83), fb(0x84), fb(0x85), fb(0x86), fb(0x87),\
         fb(0x88), fb(0x89), fb(0x8a), fb(0x8b), fb(0x8c), fb(0x8d), fb(0x8e), fb(0x8f),\
         fb(0x90), fb(0x91), fb(0x92), fb(0x93), fb(0x94), fb(0x95), fb(0x96), fb(0x97),\
         fb(0x98), fb(0x99), fb(0x9a), fb(0x9b), fb(0x9c), fb(0x9d), fb(0x9e), fb(0x9f),\
         fb(0xa0), fb(0xa1), fb(0xa2), fb(0xa3), fb(0xa4), fb(0xa5), fb(0xa6), fb(0xa7),\
         fb(0xa8), fb(0xa9), fb(0xaa), fb(0xab), fb(0xac), fb(0xad), fb(0xae), fb(0xaf),\
         fb(0xb0), fb(0xb1), fb(0xb2), fb(0xb3), fb(0xb4), fb(0xb5), fb(0xb6), fb(0xb7),\
         fb(0xb8), fb(0xb9), fb(0xba), fb(0xbb), fb(0xbc), fb(0xbd), fb(0xbe), fb(0xbf),\
         fb(0xc0), fb(0xc1), fb(0xc2), fb(0xc3), fb(0xc4), fb(0xc5), fb(0xc6), fb(0xc7),\
         fb(0xc8), fb(0xc9), fb(0xca), fb(0xcb), fb(0xcc), fb(0xcd), fb(0xce), fb(0xcf),\
         fb(0xd0), fb(0xd1), fb(0xd2), fb(0xd3), fb(0xd4), fb(0xd5), fb(0xd6), fb(0xd7),\
         fb(0xd8), fb(0xd9), fb(0xda), fb(0xdb), fb(0xdc), fb(0xdd), fb(0xde), fb(0xdf),\
         fb(0xe0), fb(0xe1), fb(0xe2), fb(0xe3), fb(0xe4), fb(0xe5), fb(0xe6), fb(0xe7),\
         fb(0xe8), fb(0xe9), fb(0xea), fb(0xeb), fb(0xec), fb(0xed), fb(0xee), fb(0xef),\
         fb(0xf0), fb(0xf1), fb(0xf2), fb(0xf3), fb(0xf4), fb(0xf5), fb(0xf6), fb(0xf7),\
         fb(0xf8), fb(0xf9), fb(0xfa), fb(0xfb), fb(0xfc), fb(0xfd), fb(0xfe), fb(0xff)
        };

//static const uint8_t gfmul_d[256] = mm_data(fd);
const uint8_t gfmul_d[256] =
        {
                fd(0x00), fd(0x01), fd(0x02), fd(0x03), fd(0x04), fd(0x05), fd(0x06), fd(0x07),\
         fd(0x08), fd(0x09), fd(0x0a), fd(0x0b), fd(0x0c), fd(0x0d), fd(0x0e), fd(0x0f),\
         fd(0x10), fd(0x11), fd(0x12), fd(0x13), fd(0x14), fd(0x15), fd(0x16), fd(0x17),\
         fd(0x18), fd(0x19), fd(0x1a), fd(0x1b), fd(0x1c), fd(0x1d), fd(0x1e), fd(0x1f),\
         fd(0x20), fd(0x21), fd(0x22), fd(0x23), fd(0x24), fd(0x25), fd(0x26), fd(0x27),\
         fd(0x28), fd(0x29), fd(0x2a), fd(0x2b), fd(0x2c), fd(0x2d), fd(0x2e), fd(0x2f),\
         fd(0x30), fd(0x31), fd(0x32), fd(0x33), fd(0x34), fd(0x35), fd(0x36), fd(0x37),\
         fd(0x38), fd(0x39), fd(0x3a), fd(0x3b), fd(0x3c), fd(0x3d), fd(0x3e), fd(0x3f),\
         fd(0x40), fd(0x41), fd(0x42), fd(0x43), fd(0x44), fd(0x45), fd(0x46), fd(0x47),\
         fd(0x48), fd(0x49), fd(0x4a), fd(0x4b), fd(0x4c), fd(0x4d), fd(0x4e), fd(0x4f),\
         fd(0x50), fd(0x51), fd(0x52), fd(0x53), fd(0x54), fd(0x55), fd(0x56), fd(0x57),\
         fd(0x58), fd(0x59), fd(0x5a), fd(0x5b), fd(0x5c), fd(0x5d), fd(0x5e), fd(0x5f),\
         fd(0x60), fd(0x61), fd(0x62), fd(0x63), fd(0x64), fd(0x65), fd(0x66), fd(0x67),\
         fd(0x68), fd(0x69), fd(0x6a), fd(0x6b), fd(0x6c), fd(0x6d), fd(0x6e), fd(0x6f),\
         fd(0x70), fd(0x71), fd(0x72), fd(0x73), fd(0x74), fd(0x75), fd(0x76), fd(0x77),\
         fd(0x78), fd(0x79), fd(0x7a), fd(0x7b), fd(0x7c), fd(0x7d), fd(0x7e), fd(0x7f),\
         fd(0x80), fd(0x81), fd(0x82), fd(0x83), fd(0x84), fd(0x85), fd(0x86), fd(0x87),\
         fd(0x88), fd(0x89), fd(0x8a), fd(0x8b), fd(0x8c), fd(0x8d), fd(0x8e), fd(0x8f),\
         fd(0x90), fd(0x91), fd(0x92), fd(0x93), fd(0x94), fd(0x95), fd(0x96), fd(0x97),\
         fd(0x98), fd(0x99), fd(0x9a), fd(0x9b), fd(0x9c), fd(0x9d), fd(0x9e), fd(0x9f),\
         fd(0xa0), fd(0xa1), fd(0xa2), fd(0xa3), fd(0xa4), fd(0xa5), fd(0xa6), fd(0xa7),\
         fd(0xa8), fd(0xa9), fd(0xaa), fd(0xab), fd(0xac), fd(0xad), fd(0xae), fd(0xaf),\
         fd(0xb0), fd(0xb1), fd(0xb2), fd(0xb3), fd(0xb4), fd(0xb5), fd(0xb6), fd(0xb7),\
         fd(0xb8), fd(0xb9), fd(0xba), fd(0xbb), fd(0xbc), fd(0xbd), fd(0xbe), fd(0xbf),\
         fd(0xc0), fd(0xc1), fd(0xc2), fd(0xc3), fd(0xc4), fd(0xc5), fd(0xc6), fd(0xc7),\
         fd(0xc8), fd(0xc9), fd(0xca), fd(0xcb), fd(0xcc), fd(0xcd), fd(0xce), fd(0xcf),\
         fd(0xd0), fd(0xd1), fd(0xd2), fd(0xd3), fd(0xd4), fd(0xd5), fd(0xd6), fd(0xd7),\
         fd(0xd8), fd(0xd9), fd(0xda), fd(0xdb), fd(0xdc), fd(0xdd), fd(0xde), fd(0xdf),\
         fd(0xe0), fd(0xe1), fd(0xe2), fd(0xe3), fd(0xe4), fd(0xe5), fd(0xe6), fd(0xe7),\
         fd(0xe8), fd(0xe9), fd(0xea), fd(0xeb), fd(0xec), fd(0xed), fd(0xee), fd(0xef),\
         fd(0xf0), fd(0xf1), fd(0xf2), fd(0xf3), fd(0xf4), fd(0xf5), fd(0xf6), fd(0xf7),\
         fd(0xf8), fd(0xf9), fd(0xfa), fd(0xfb), fd(0xfc), fd(0xfd), fd(0xfe), fd(0xff)
        };

//static const uint8_t gfmul_9[256] = mm_data(f9);
const uint8_t gfmul_9[256] =
        {
                f9(0x00), f9(0x01), f9(0x02), f9(0x03), f9(0x04), f9(0x05), f9(0x06), f9(0x07),\
         f9(0x08), f9(0x09), f9(0x0a), f9(0x0b), f9(0x0c), f9(0x0d), f9(0x0e), f9(0x0f),\
         f9(0x10), f9(0x11), f9(0x12), f9(0x13), f9(0x14), f9(0x15), f9(0x16), f9(0x17),\
         f9(0x18), f9(0x19), f9(0x1a), f9(0x1b), f9(0x1c), f9(0x1d), f9(0x1e), f9(0x1f),\
         f9(0x20), f9(0x21), f9(0x22), f9(0x23), f9(0x24), f9(0x25), f9(0x26), f9(0x27),\
         f9(0x28), f9(0x29), f9(0x2a), f9(0x2b), f9(0x2c), f9(0x2d), f9(0x2e), f9(0x2f),\
         f9(0x30), f9(0x31), f9(0x32), f9(0x33), f9(0x34), f9(0x35), f9(0x36), f9(0x37),\
         f9(0x38), f9(0x39), f9(0x3a), f9(0x3b), f9(0x3c), f9(0x3d), f9(0x3e), f9(0x3f),\
         f9(0x40), f9(0x41), f9(0x42), f9(0x43), f9(0x44), f9(0x45), f9(0x46), f9(0x47),\
         f9(0x48), f9(0x49), f9(0x4a), f9(0x4b), f9(0x4c), f9(0x4d), f9(0x4e), f9(0x4f),\
         f9(0x50), f9(0x51), f9(0x52), f9(0x53), f9(0x54), f9(0x55), f9(0x56), f9(0x57),\
         f9(0x58), f9(0x59), f9(0x5a), f9(0x5b), f9(0x5c), f9(0x5d), f9(0x5e), f9(0x5f),\
         f9(0x60), f9(0x61), f9(0x62), f9(0x63), f9(0x64), f9(0x65), f9(0x66), f9(0x67),\
         f9(0x68), f9(0x69), f9(0x6a), f9(0x6b), f9(0x6c), f9(0x6d), f9(0x6e), f9(0x6f),\
         f9(0x70), f9(0x71), f9(0x72), f9(0x73), f9(0x74), f9(0x75), f9(0x76), f9(0x77),\
         f9(0x78), f9(0x79), f9(0x7a), f9(0x7b), f9(0x7c), f9(0x7d), f9(0x7e), f9(0x7f),\
         f9(0x80), f9(0x81), f9(0x82), f9(0x83), f9(0x84), f9(0x85), f9(0x86), f9(0x87),\
         f9(0x88), f9(0x89), f9(0x8a), f9(0x8b), f9(0x8c), f9(0x8d), f9(0x8e), f9(0x8f),\
         f9(0x90), f9(0x91), f9(0x92), f9(0x93), f9(0x94), f9(0x95), f9(0x96), f9(0x97),\
         f9(0x98), f9(0x99), f9(0x9a), f9(0x9b), f9(0x9c), f9(0x9d), f9(0x9e), f9(0x9f),\
         f9(0xa0), f9(0xa1), f9(0xa2), f9(0xa3), f9(0xa4), f9(0xa5), f9(0xa6), f9(0xa7),\
         f9(0xa8), f9(0xa9), f9(0xaa), f9(0xab), f9(0xac), f9(0xad), f9(0xae), f9(0xaf),\
         f9(0xb0), f9(0xb1), f9(0xb2), f9(0xb3), f9(0xb4), f9(0xb5), f9(0xb6), f9(0xb7),\
         f9(0xb8), f9(0xb9), f9(0xba), f9(0xbb), f9(0xbc), f9(0xbd), f9(0xbe), f9(0xbf),\
         f9(0xc0), f9(0xc1), f9(0xc2), f9(0xc3), f9(0xc4), f9(0xc5), f9(0xc6), f9(0xc7),\
         f9(0xc8), f9(0xc9), f9(0xca), f9(0xcb), f9(0xcc), f9(0xcd), f9(0xce), f9(0xcf),\
         f9(0xd0), f9(0xd1), f9(0xd2), f9(0xd3), f9(0xd4), f9(0xd5), f9(0xd6), f9(0xd7),\
         f9(0xd8), f9(0xd9), f9(0xda), f9(0xdb), f9(0xdc), f9(0xdd), f9(0xde), f9(0xdf),\
         f9(0xe0), f9(0xe1), f9(0xe2), f9(0xe3), f9(0xe4), f9(0xe5), f9(0xe6), f9(0xe7),\
         f9(0xe8), f9(0xe9), f9(0xea), f9(0xeb), f9(0xec), f9(0xed), f9(0xee), f9(0xef),\
         f9(0xf0), f9(0xf1), f9(0xf2), f9(0xf3), f9(0xf4), f9(0xf5), f9(0xf6), f9(0xf7),\
         f9(0xf8), f9(0xf9), f9(0xfa), f9(0xfb), f9(0xfc), f9(0xfd), f9(0xfe), f9(0xff)
        };


#ifdef __OBJC__
#import <Foundation/Foundation.h>
#import <BLELib2/sw_share.h>

@implementation AESFunctions : NSObject
#else
#include "sw_share.h"
#endif

void print_hex(unsigned char *p, int len) {
    int i;
    for(i = 0; i< len;i++) {
        printf("%.2X ",p[i]);
    }
    printf("\n");
}

void xor_block(void *d, const void *s) {
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
}

void copy_and_key(void *d, const void *s, const void *k) {
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
}

#if defined( VERSION_1 )
void mix_sub_columns(uint8_t *dt) {
    uint8_t st[N_BLOCK_AES];
    block_copy(st, dt);
#else
static void mix_sub_columns( uint8_t dt[N_BLOCK_AES], uint8_t st[N_BLOCK_AES] ) {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
}

#if defined( VERSION_1 )
void inv_mix_sub_columns(uint8_t *dt) {
    uint8_t st[N_BLOCK_AES];
    block_copy(st, dt);
#else
    static void inv_mix_sub_columns( uint8_t dt[N_BLOCK_AES], uint8_t st[N_BLOCK_AES] ) {
#endif
    dt[ 0] = is_box(gfm_e(st[ 0]) ^ gfm_b(st[ 1]) ^ gfm_d(st[ 2]) ^ gfm_9(st[ 3]));
    dt[ 5] = is_box(gfm_9(st[ 0]) ^ gfm_e(st[ 1]) ^ gfm_b(st[ 2]) ^ gfm_d(st[ 3]));
    dt[10] = is_box(gfm_d(st[ 0]) ^ gfm_9(st[ 1]) ^ gfm_e(st[ 2]) ^ gfm_b(st[ 3]));
    dt[15] = is_box(gfm_b(st[ 0]) ^ gfm_d(st[ 1]) ^ gfm_9(st[ 2]) ^ gfm_e(st[ 3]));

    dt[ 4] = is_box(gfm_e(st[ 4]) ^ gfm_b(st[ 5]) ^ gfm_d(st[ 6]) ^ gfm_9(st[ 7]));
    dt[ 9] = is_box(gfm_9(st[ 4]) ^ gfm_e(st[ 5]) ^ gfm_b(st[ 6]) ^ gfm_d(st[ 7]));
    dt[14] = is_box(gfm_d(st[ 4]) ^ gfm_9(st[ 5]) ^ gfm_e(st[ 6]) ^ gfm_b(st[ 7]));
    dt[ 3] = is_box(gfm_b(st[ 4]) ^ gfm_d(st[ 5]) ^ gfm_9(st[ 6]) ^ gfm_e(st[ 7]));

    dt[ 8] = is_box(gfm_e(st[ 8]) ^ gfm_b(st[ 9]) ^ gfm_d(st[10]) ^ gfm_9(st[11]));
    dt[13] = is_box(gfm_9(st[ 8]) ^ gfm_e(st[ 9]) ^ gfm_b(st[10]) ^ gfm_d(st[11]));
    dt[ 2] = is_box(gfm_d(st[ 8]) ^ gfm_9(st[ 9]) ^ gfm_e(st[10]) ^ gfm_b(st[11]));
    dt[ 7] = is_box(gfm_b(st[ 8]) ^ gfm_d(st[ 9]) ^ gfm_9(st[10]) ^ gfm_e(st[11]));

    dt[12] = is_box(gfm_e(st[12]) ^ gfm_b(st[13]) ^ gfm_d(st[14]) ^ gfm_9(st[15]));
    dt[ 1] = is_box(gfm_9(st[12]) ^ gfm_e(st[13]) ^ gfm_b(st[14]) ^ gfm_d(st[15]));
    dt[ 6] = is_box(gfm_d(st[12]) ^ gfm_9(st[13]) ^ gfm_e(st[14]) ^ gfm_b(st[15]));
    dt[11] = is_box(gfm_b(st[12]) ^ gfm_d(st[13]) ^ gfm_9(st[14]) ^ gfm_e(st[15]));
}

void inv_shift_sub_rows(uint8_t *st) {
    uint8_t tt;

    st[ 0] = is_box(st[ 0]); st[ 4] = is_box(st[ 4]);
    st[ 8] = is_box(st[ 8]); st[12] = is_box(st[12]);

    tt = st[13]; st[13] = is_box(st[9]); st[ 9] = is_box(st[5]);
    st[ 5] = is_box(st[1]); st[ 1] = is_box( tt );

    tt = st[2]; st[ 2] = is_box(st[10]); st[10] = is_box( tt );
    tt = st[6]; st[ 6] = is_box(st[14]); st[14] = is_box( tt );

    tt = st[3]; st[ 3] = is_box(st[ 7]); st[ 7] = is_box(st[11]);
    st[11] = is_box(st[15]); st[15] = is_box( tt );
}

void add_round_key(uint8_t *d, const uint8_t *k) {
    xor_block(d, k);
}

void shift_sub_rows(uint8_t *st) {
    uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
}

return_type_aes aes_set_key(const unsigned char *key, length_type_aes keylen, aes_context *ctx) {
    uint8_t cc, rc, hi;

    switch( keylen )
    {
        case 16:
        case 128:
            keylen = 16;
            break;
        case 24:
        case 192:
            keylen = 24;
            break;
        case 32:
            //    case 256:
            keylen = 32;
            break;
        default:
            ctx->rnd = 0;
            return -1;
    }
    block_copy_nn(ctx->ksch, key, keylen);
    hi = (keylen + 28) << 2;
    ctx->rnd = (hi >> 4) - 1;
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
        t1 = ctx->ksch[cc - 3];
        t2 = ctx->ksch[cc - 2];
        t3 = ctx->ksch[cc - 1];
        if( cc % keylen == 0 )
        {
            tt = t0;
            t0 = s_box(t1) ^ rc;
            t1 = s_box(t2);
            t2 = s_box(t3);
            t3 = s_box(tt);
            rc = f2(rc);
        }
        else if( keylen > 24 && cc % keylen == 16 )
        {
            t0 = s_box(t0);
            t1 = s_box(t1);
            t2 = s_box(t2);
            t3 = s_box(t3);
        }
        tt = cc - keylen;
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}

return_type_aes aes_encrypt(const unsigned char *in, unsigned char *out, const aes_context *ctx) {
    if( ctx->rnd )
    {
        uint8_t s1[N_BLOCK_AES], r;
        copy_and_key( s1, in, ctx->ksch );

        for( r = 1 ; r < ctx->rnd ; ++r )
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
            add_round_key( s1, ctx->ksch + r * N_BLOCK_AES);
        }
#else
        {   uint8_t s2[N_BLOCK_AES];
        mix_sub_columns( s2, s1 );
        copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK_AES);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK_AES );
    }
    else
        return -1;
    return 0;
}

return_type_aes
    aes_cbc_encrypt(const unsigned char *in, unsigned char *out, uint16_t n_block, unsigned char *iv,
                         const aes_context *ctx) {
    while(n_block--) {
        xor_block(iv, in);
        if(aes_encrypt(iv, iv, ctx) != AES_EXIT_SUCCESS)
            return AES_EXIT_FAILURE;
        memcpy(out, iv, N_BLOCK_AES);
        in += N_BLOCK_AES;
        out += N_BLOCK_AES;
    }
    return AES_EXIT_SUCCESS;
}

return_type_aes aes_decrypt(const unsigned char *in, unsigned char *out, const aes_context *ctx) {
    if( ctx->rnd )
    {
        uint8_t s1[N_BLOCK_AES], r;
        copy_and_key( s1, in, ctx->ksch + ctx->rnd * N_BLOCK_AES );
        inv_shift_sub_rows( s1 );

        for( r = ctx->rnd ; --r ; )
#if defined( VERSION_1 )
        {
            add_round_key( s1, ctx->ksch + r * N_BLOCK_AES );
            inv_mix_sub_columns( s1 );
        }
#else
        {   uint8_t s2[N_BLOCK_AES];
        copy_and_key( s2, s1, ctx->ksch + r * N_BLOCK_AES );
        inv_mix_sub_columns( s1, s2 );
        }
#endif
        copy_and_key( out, s1, ctx->ksch );
    }
    else
        return -1;
    return 0;
}

return_type_aes
    aes_cbc_decrypt(const unsigned char *in, unsigned char *out, uint16_t n_block, unsigned char *iv,
                         const aes_context *ctx) {
    while(n_block--)
    {
        uint8_t tmp[N_BLOCK_AES];
        memcpy(tmp, in, N_BLOCK_AES);
        if(aes_decrypt(in, out, ctx) != AES_EXIT_SUCCESS)
            return AES_EXIT_FAILURE;
        xor_block(out, iv);
        memcpy(iv, tmp, N_BLOCK_AES);
        in += N_BLOCK_AES;
        out += N_BLOCK_AES;
    }
    return AES_EXIT_SUCCESS;
}

#ifdef __OBJC__
+ (uint32_t) data_encrypt:(unsigned char *)ptr and:(uint32_t)len and:(unsigned char *)key and:(aes_mode_t)mode {
#else
uint32_t data_encrypt(unsigned char *ptr, uint32_t len, unsigned char *key, aes_mode_t mode) {
#endif
    aes_context ctx;
    unsigned char iv[ENC_KEY_LENGTH];
    uint32_t l;
    int i;

    aes_set_key(key, ENC_KEY_LENGTH, &ctx);

    for (i = 0; i < N_BLOCK_AES; i++)
        iv[i] = i ^ key[i];

#if defined(__SOFTWARE__)
    #if defined(FORZA_TEST_PACCHETTO)
    popup_message_2("iv", iv, ENC_KEY_LENGTH);
    popup_message_2("key", key, ENC_KEY_LENGTH);
#endif
#endif

    if(mode == AES_ENC)
    {
        l = data_pad(ptr, len);
        if(aes_cbc_encrypt( ptr, ptr, l / N_BLOCK_AES, iv, &ctx) != AES_EXIT_SUCCESS)
            return 0;
    }
    else if(mode == AES_DEC)
    {
        if(aes_cbc_decrypt( ptr, ptr, len / N_BLOCK_AES, iv, &ctx) != AES_EXIT_SUCCESS)
            return 0;
        //elimino il padding
        l = len - ptr[len-1];
    }
    else
    {
        l = 0;
    }
    return l;
}

uint32_t data_pad(unsigned char *buffer, uint32_t size) {
    int val = ((size / ENC_KEY_LENGTH) + 1) * ENC_KEY_LENGTH;
    int res = val - size;
    int i;

    for (i = size; i < val; i++)
        buffer[i] = res;
    return val;
}


#ifdef __OBJC__
@end
#endif
